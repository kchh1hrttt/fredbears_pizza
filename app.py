from flask import Flask, jsonify, render_template, request, redirect, session, url_for, render_template_string
import json
import os
from werkzeug.security import generate_password_hash, check_password_hash
from werkzeug.utils import secure_filename
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing.sequence import pad_sequences
import nltk
from nltk.stem import PorterStemmer
import numpy as np
import tensorflow as tf
import pickle
import random
import re

app = Flask(__name__)
app.secret_key = 'qwererwerr234r423r23r423'
USERS_FILE = 'users.json'
AVATAR_FOLDER = 'static/avatars'

os.makedirs(AVATAR_FOLDER, exist_ok=True)





app = Flask(__name__)

# === –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ —Ç–∞ –æ–± º—î–∫—Ç—ñ–≤ ===
model = load_model('chat_bot/chatbot_model.h5')

with open('chat_bot/tokenizer.pkl', 'rb') as f:
    tokenizer = pickle.load(f)

with open('chat_bot/label_encoder.pkl', 'rb') as f:
    label_encoder = pickle.load(f)

with open('chat_bot/8.json', 'r', encoding='utf-8') as f:
    intents = json.load(f)

# === –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç—É ===
def clean_text(text):
    text = text.lower()
    text = re.sub(r'[^a-z–∞-—è—ñ—ó—î“ë0-9\\s]', '', text)
    text = re.sub(r'\\s+', ' ', text).strip()
    return text

# === –ì–ª–æ–±–∞–ª—å–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç ===
active_context = None

# === –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å ===
def get_response(user_input, show_top=3):
    global active_context
    cleaned = clean_text(user_input)
    seq = tokenizer.texts_to_sequences([cleaned])
    padded = pad_sequences(seq, maxlen=model.input_shape[1], padding='post')
    prediction = model.predict(padded, verbose=0)[0]

    # –í–∏–±—ñ—Ä —Ç–µ–≥—ñ–≤ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º context_filter
    tag_probs = []
    for idx in range(len(prediction)):
        full_tag = label_encoder.inverse_transform([idx])[0]
        tag = full_tag.split("__")[-1]
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ context_filter
        for intent in intents["intents"]:
            if intent["tag"] == tag:
                context_filter = intent.get("context_filter")
                if not context_filter or context_filter == active_context:
                    tag_probs.append((tag, prediction[idx], intent))
                break

    tag_probs.sort(key=lambda x: x[1], reverse=True)
    tag_probs = tag_probs[:show_top]

    if not tag_probs or tag_probs[0][1] < 0.3:
        return "‚ö†Ô∏è –í–∏–±–∞—á, —è –Ω–µ –∑—Ä–æ–∑—É–º—ñ–≤. –ú–æ–∂–µ—à –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏?"

    top_tag, top_conf, top_intent = tag_probs[0]

    # –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    if "context_set" in top_intent:
        active_context = top_intent["context_set"]

    # –í–∏–≤—ñ–¥ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    print("\\nüß† Top {} –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω—å:".format(show_top))
    for tag, conf, intent in tag_probs:
        print(f" ‚Üí [{tag}] ({conf*100:.1f}%): {random.choice(intent['responses'])}")

    return f"{random.choice(top_intent['responses'])}"


@app.route("/chat_hints")
def get_chat_hints():
    hint_phrases = []
    for intent in intents.get("intents", []):
        patterns = intent.get("patterns", [])
        if patterns:
            hint_phrases.extend(random.sample(patterns, min(2, len(patterns))))

    unique_hints = list(dict.fromkeys(hint_phrases))
    selected_hints = random.sample(unique_hints, min(10, len(unique_hints)))

    return jsonify(selected_hints)


# === –†–æ—É—Ç –¥–ª—è HTML —Ñ–æ—Ä–º–∏ ===
@app.route("/")
def index():
    return render_template("index.html")

# === –†–æ—É—Ç –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—ñ–≤ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ===
@app.route("/get", methods=["GET"])
def chat_response():
    user_input = request.args.get("msg")
    response = get_response(user_input)
    return jsonify({"response": response})


pizzas = [
    {'name': '–†—É—Å—Ç–∏–∫–∞', 'description': '–¢i—Å—Ç–æ, –∫—É—Ä–∫–∞ –∑ –±–µ–∫–æ–Ω–æ–º, –ø–æ–º—ñ–¥–æ—Ä–∞–º–∏ —á–µ—Ä—Ä—ñ —Ç–∞ —á–µ—Ä–≤–æ–Ω–æ—é —Ü–∏–±—É–ª–µ—é –Ω–∞ —Ç–æ–Ω–∫–æ–º—É —Ç—ñ—Å—Ç—ñ –∑ –º–æ—Ü–∞—Ä–µ–ª–æ—é —Ç–∞ –±–∞–∑–∏–ª—ñ–∫–æ–º.', 'price': '500', 'image': '—Ä—É—Å—Ç–∏–∫–∞.png'},
    {'name': '–õ—ñ—Ç–Ω—è', 'description': '–¢—ñ—Å—Ç–æ, —Ç–æ–º–∞—Ç–Ω–∏–π —Å–æ—É—Å, —Å–∏—Ä –º–æ—Ü–∞—Ä–µ–ª–ª–∞, –∫—É—Ä—è—á–µ —Ñ—ñ–ª–µ, –±–µ–∫–æ–Ω, –ø–æ–º—ñ–¥–æ—Ä–∏ —á–µ—Ä—ñ, —á–µ—Ä–≤–æ–Ω–∞ —Ü–∏–±—É–ª—è, –±–æ–ª–≥–∞—Ä—Å—å–∫–∏–π –ø–µ—Ä–µ—Ü—å, –ª–∏—Å—Ç—è –±–∞–∑–∏–ª—ñ–∫—É.', 'price': '500', 'image': '–ª—ñ—Ç–Ω—è.png'},
    {'name': '–î–µ–ª—ñ–∫–∞—Ç–µ—Å–Ω–∞', 'description': '–¢—ñ—Å—Ç–æ, —Ç–æ–º–∞—Ç–Ω–∏–π —Å–æ—É—Å, —Å–∏—Ä –º–æ—Ü–∞—Ä–µ–ª–ª–∞, —à–∏–Ω–∫–∞, –≥—Ä–∏–±–∏, –∞—Ä—Ç–∏—à–æ–∫–∏, –æ–ª–∏–≤–∫–∏, –∑–µ–ª–µ–Ω—å.', 'price': '500', 'image': '–¥–µ–ª—ñ–∫–∞—Ç–µ—Å–Ω–∞.png'},
    {'name': '–õ—ñ—Ç–Ω—è', 'description': '–¢—ñ—Å—Ç–æ, —Ç–æ–º–∞—Ç–Ω–∏–π —Å–æ—É—Å, —Å–∏—Ä –º–æ—Ü–∞—Ä–µ–ª–ª–∞, –∫—É—Ä—è—á–µ —Ñ—ñ–ª–µ, –±–µ–∫–æ–Ω, –ø–æ–º—ñ–¥–æ—Ä–∏ —á–µ—Ä—ñ, —á–µ—Ä–≤–æ–Ω–∞ —Ü–∏–±—É–ª—è, –±–æ–ª–≥–∞—Ä—Å—å–∫–∏–π –ø–µ—Ä–µ—Ü—å, –ª–∏—Å—Ç—è –±–∞–∑–∏–ª—ñ–∫—É.', 'price': '500', 'image': '–ª—ñ—Ç–Ω—è.png'},
    {'name': '–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞', 'description': '–¢—ñ—Å—Ç–æ, —Ç–æ–º–∞—Ç–Ω–∏–π —Å–æ—É—Å, —Å–∏—Ä –º–æ—Ü–∞—Ä–µ–ª–ª–∞, –ø–æ–º—ñ–¥–æ—Ä–∏ —á–µ—Ä—ñ, –æ–ª–∏–≤–∫–∏, –±–∞–∑–∏–ª—ñ–∫.', 'price': '500', 'image': '–º–∞—Ä–≥–∞—Ä–∏—Ç–∞.png'},
    {'name': '–ü–µ–ø–µ—Ä–æ–Ω—ñ', 'description': '–¢—ñ—Å—Ç–æ, —Ç–æ–º–∞—Ç–Ω–∏–π —Å–æ—É—Å, —Å–∏—Ä –º–æ—Ü–∞—Ä–µ–ª–ª–∞, –ø–µ–ø–µ—Ä–æ–Ω—ñ.', 'price': '500', 'image': '–ø–µ–ø–µ—Ä–æ–Ω—ñ.png'},
    {'name': '–©–µ–¥—Ä–∞', 'description': '—ñ—Å—Ç–æ, —Ç–æ–º–∞—Ç–Ω–∏–π —Å–æ—É—Å, —Å–∏—Ä –º–æ—Ü–∞—Ä–µ–ª–ª–∞, –ø–µ–ø–µ—Ä–æ–Ω—ñ, –≥—Ä–∏–±–∏, –ø–æ–º—ñ–¥–æ—Ä–∏ —á–µ—Ä—ñ, —è–π—Ü—è, –æ–ª–∏–≤–∫–∏, —à–∏–Ω–∫–∞, —Ü–∏–±—É–ª—è, –∑–µ–ª–µ–Ω—å.', 'price': '500', 'image': '—â–µ–¥—Ä–∞.png'},
    {'name': '–õ—ñ—Ç–Ω—è', 'description': '–¢—ñ—Å—Ç–æ, —Ç–æ–º–∞—Ç–Ω–∏–π —Å–æ—É—Å, —Å–∏—Ä –º–æ—Ü–∞—Ä–µ–ª–ª–∞, –∫—É—Ä—è—á–µ —Ñ—ñ–ª–µ, –±–µ–∫–æ–Ω, –ø–æ–º—ñ–¥–æ—Ä–∏ —á–µ—Ä—ñ, —á–µ—Ä–≤–æ–Ω–∞ —Ü–∏–±—É–ª—è, –±–æ–ª–≥–∞—Ä—Å—å–∫–∏–π –ø–µ—Ä–µ—Ü—å, –ª–∏—Å—Ç—è –±–∞–∑–∏–ª—ñ–∫—É.', 'price': '500', 'image': '–ª—ñ—Ç–Ω—è.png'},
    {'name': '–î–µ–ª—ñ–∫–∞—Ç–µ—Å–Ω–∞', 'description': '–¢—ñ—Å—Ç–æ, —Ç–æ–º–∞—Ç–Ω–∏–π —Å–æ—É—Å, —Å–∏—Ä –º–æ—Ü–∞—Ä–µ–ª–ª–∞, —à–∏–Ω–∫–∞, –≥—Ä–∏–±–∏, –∞—Ä—Ç–∏—à–æ–∫–∏, –æ–ª–∏–≤–∫–∏, –∑–µ–ª–µ–Ω—å.', 'price': '500', 'image': '–¥–µ–ª—ñ–∫–∞—Ç–µ—Å–Ω–∞.png'},
    {'name': '–õ—ñ—Ç–Ω—è', 'description': '–¢—ñ—Å—Ç–æ, —Ç–æ–º–∞—Ç–Ω–∏–π —Å–æ—É—Å, —Å–∏—Ä –º–æ—Ü–∞—Ä–µ–ª–ª–∞, –∫—É—Ä—è—á–µ —Ñ—ñ–ª–µ, –±–µ–∫–æ–Ω, –ø–æ–º—ñ–¥–æ—Ä–∏ —á–µ—Ä—ñ, —á–µ—Ä–≤–æ–Ω–∞ —Ü–∏–±—É–ª—è, –±–æ–ª–≥–∞—Ä—Å—å–∫–∏–π –ø–µ—Ä–µ—Ü—å, –ª–∏—Å—Ç—è –±–∞–∑–∏–ª—ñ–∫—É.', 'price': '500', 'image': '–ª—ñ—Ç–Ω—è.png'},
    {'name': '–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞', 'description': '–¢—ñ—Å—Ç–æ, —Ç–æ–º–∞—Ç–Ω–∏–π —Å–æ—É—Å, —Å–∏—Ä –º–æ—Ü–∞—Ä–µ–ª–ª–∞, –ø–æ–º—ñ–¥–æ—Ä–∏ —á–µ—Ä—ñ, –æ–ª–∏–≤–∫–∏, –±–∞–∑–∏–ª—ñ–∫.', 'price': '500', 'image': '–º–∞—Ä–≥–∞—Ä–∏—Ç–∞.png'},
    {'name': '–ü–µ–ø–µ—Ä–æ–Ω—ñ', 'description': '–¢—ñ—Å—Ç–æ, —Ç–æ–º–∞—Ç–Ω–∏–π —Å–æ—É—Å, —Å–∏—Ä –º–æ—Ü–∞—Ä–µ–ª–ª–∞, –ø–µ–ø–µ—Ä–æ–Ω—ñ.', 'price': '500', 'image': '–ø–µ–ø–µ—Ä–æ–Ω—ñ.png'},
    {'name': '–©–µ–¥—Ä–∞', 'description': '—ñ—Å—Ç–æ, —Ç–æ–º–∞—Ç–Ω–∏–π —Å–æ—É—Å, —Å–∏—Ä –º–æ—Ü–∞—Ä–µ–ª–ª–∞, –ø–µ–ø–µ—Ä–æ–Ω—ñ, –≥—Ä–∏–±–∏, –ø–æ–º—ñ–¥–æ—Ä–∏ —á–µ—Ä—ñ, —è–π—Ü—è, –æ–ª–∏–≤–∫–∏, —à–∏–Ω–∫–∞, —Ü–∏–±—É–ª—è, –∑–µ–ª–µ–Ω—å.', 'price': '500', 'image': '—â–µ–¥—Ä–∞.png'}
]

drinks = [
    {'name': '–ö–æ–ª–∞ 0.5–ª', 'description': '', 'price': '30', 'image': '–∫–æ–∫–∞_–∫–æ–ª–∞.png'},
    {'name': '–ü–∏–≤–æ "–ê—Ä–∞"', 'description': '', 'price': '55', 'image': '–∞—Ä–∞.png'},
    {'name': '–ü–µ–ø—Å—ñ 0.5–ª', 'description': '', 'price': '30', 'image': '–ø–µ–ø—Å—ñ.png'},
    {'name': '–°–ø—Ä–∞–π—Ç 0.5', 'description': '', 'price': '42', 'image': '—Å–ø—Ä–∞–π—Ç.png'},
    {'name': '–ö–æ–ª–∞ 1–ª', 'description': '', 'price': '50', 'image': '–∫–æ–∫–∞_–∫–æ–ª–∞.png'},
    {'name': '–ü–µ–ø—Å—ñ 1–ª', 'description': '', 'price': '55', 'image': '–ø–µ–ø—Å—ñ.png'},
    {'name': '–°–ø—Ä–∞–π—Ç 1–ª', 'description': '', 'price': '65', 'image': '—Å–ø—Ä–∞–π—Ç.png'},
]

sweets = [
    {'name': '–ú—ñ—Å—Ç–µ—Ä –ö–µ–∫—Å', 'description': '', 'price': '99999', 'image': '–º—ñ—Å—Ç–µ—Ä_–∫–µ–∫—Å.png'},
    {'name': '–ú—ñ—Å—Ç–µ—Ä –ö–µ–∫—Å', 'description': '', 'price': '99999', 'image': '–º—ñ—Å—Ç–µ—Ä_–∫–µ–∫—Å.png'},
    {'name': '–ú—ñ—Å—Ç–µ—Ä –ö–µ–∫—Å', 'description': '', 'price': '99999', 'image': '–º—ñ—Å—Ç–µ—Ä_–∫–µ–∫—Å.png'},
    {'name': '–ú—ñ—Å—Ç–µ—Ä –ö–µ–∫—Å', 'description': '', 'price': '99999', 'image': '–º—ñ—Å—Ç–µ—Ä_–∫–µ–∫—Å.png'},
    {'name': '–ú—ñ—Å—Ç–µ—Ä –ö–µ–∫—Å', 'description': '', 'price': '99999', 'image': '–º—ñ—Å—Ç–µ—Ä_–∫–µ–∫—Å.png'},
    {'name': '–ú—ñ—Å—Ç–µ—Ä –ö–µ–∫—Å', 'description': '', 'price': '99999', 'image': '–º—ñ—Å—Ç–µ—Ä_–∫–µ–∫—Å.png'},
    {'name': '–ú—ñ—Å—Ç–µ—Ä –ö–µ–∫—Å', 'description': '', 'price': '99999', 'image': '–º—ñ—Å—Ç–µ—Ä_–∫–µ–∫—Å.png'},
    {'name': '–ú—ñ—Å—Ç–µ—Ä –ö–µ–∫—Å', 'description': '', 'price': '99999', 'image': '–º—ñ—Å—Ç–µ—Ä_–∫–µ–∫—Å.png'},
    {'name': '–ú—ñ—Å—Ç–µ—Ä –ö–µ–∫—Å', 'description': '', 'price': '99999', 'image': '–º—ñ—Å—Ç–µ—Ä_–∫–µ–∫—Å.png'},
    {'name': '–ú—ñ—Å—Ç–µ—Ä –ö–µ–∫—Å', 'description': '', 'price': '99999', 'image': '–º—ñ—Å—Ç–µ—Ä_–∫–µ–∫—Å.png'},
    {'name': '–ú—ñ—Å—Ç–µ—Ä –ö–µ–∫—Å', 'description': '', 'price': '99999', 'image': '–º—ñ—Å—Ç–µ—Ä_–∫–µ–∫—Å.png'},
]


@app.route("/q")
def indexq():
    return render_template('index.html')


@app.route("/menu")
def menu():
    return render_template('menu.html', pizzas=pizzas, drinks=drinks, sweets=sweets)


@app.route('/get_cart_count')
def get_cart_count():
    cart = session.get('cart', [])
    total_count = sum(item.get('quantity', 1) for item in cart)
    return jsonify({'cart_count': total_count})



@app.route("/cart")
def cart():
    cart = session.get('cart', [])
    total_price = sum(
        float(item['total_price']) for item in cart if isinstance(item, dict)
    )
    return render_template('cart.html', cart=cart, total_price=total_price)


def find_product(name):
    # –ò—â–µ–º –ø–æ –≤—Å–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º ‚Äî –ø–∏—Ü—Ü–∞, –Ω–∞–ø–∏—Ç–∫–∏, –¥–µ—Å–µ—Ä—Ç—ã
    for product in pizzas + drinks + sweets:
        if product['name'] == name:
            return product
    return None


@app.route('/add_to_cart_ajax', methods=['POST'])
def add_to_cart_ajax():
    data = request.get_json()
    if not data:
        return jsonify({'success': False, 'error': 'No data'}), 400

    name = data.get('name')
    if not name:
        return jsonify({'success': False, 'error': 'No name'}), 400

    product = find_product(name)
    if not product:
        return jsonify({'success': False, 'error': 'Product not found'}), 404

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–æ—Ä–∑–∏–Ω–∏
    if 'cart' not in session or not isinstance(session['cart'], list):
        session['cart'] = []

    cart = session['cart']

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –≤–∂–µ —î —Ç–æ–≤–∞—Ä —É –∫–æ—Ä–∑–∏–Ω—ñ ‚Äî —è–∫—â–æ —Ç–∞–∫, –∑–±—ñ–ª—å—à—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å
    for item in cart:
        if isinstance(item, dict) and item.get('name') == name:
            item['quantity'] += 1
            item['total_price'] = round(item['quantity'] * float(product['price']), 2)
            break
    else:
        # –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π —Ç–æ–≤–∞—Ä
        cart.append({
            'name': product['name'],
            'price': product['price'],
            'quantity': 1,
            'total_price': float(product['price']),
            'image': product['image']
        })

    session['cart'] = cart
    session.modified = True

    return jsonify({
        'success': True,
        'cart_count': sum(item['quantity'] for item in cart)
    })


@app.route('/clear_cart', methods=["POST"])
def clear_cart():
    session.pop('cart', None)
    return redirect(url_for('cart'))


# –¢–∏–º—á–∞—Å–æ–≤–∞ –∑–∞–≥–ª—É—à–∫–∞ AI
def ai_response(message):
    if "–ø—Ä–∏–≤—ñ—Ç" in message.lower():
        return "–ü—Ä–∏–≤—ñ—Ç! –ß–∏–º –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏?"
    elif "–∑–∞–º–æ–≤–ª–µ–Ω–Ω—è" in message.lower():
        return "–•–æ—á–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è? –†–æ–∑–∫–∞–∂—ñ—Ç—å –¥–µ—Ç–∞–ª—ñ."
    else:
        return "–í–∏–±–∞—á, —è –ø–æ–∫–∏ –Ω–µ —Ä–æ–∑—É–º—ñ—é —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è üò¢"


@app.route("/support")
def chat_page():
    # –í–∏—Ç—è–≥—É—î–º–æ –ø–æ 1‚Äì2 –ø–∞—Ç–µ—Ä–Ω–∏ –∑ –∫–æ–∂–Ω–æ–≥–æ —ñ–Ω—Ç–µ–Ω—Ç—É
    hint_phrases = []
    for intent in intents.get("intents", []):
        patterns = intent.get("patterns", [])
        if patterns:
            hint_phrases.extend(random.sample(patterns, min(2, len(patterns))))

    # –£–Ω—ñ–∫–∞–ª—å–Ω—ñ, –º–∞–∫—Å–∏–º—É–º 10‚Äì12 —à—Ç—É–∫
    unique_hints = list(dict.fromkeys(hint_phrases))
    selected_hints = random.sample(unique_hints, min(10, len(unique_hints)))

    return render_template("support.html", hints=selected_hints)


@app.route("/support", methods=["POST"])
def chatq():
    data = request.get_json()
    message = data.get("message", "")
    reply = ai_response(message)
    return jsonify({"reply": reply})


@app.route('/add_from_cart_ajax', methods=['POST'])
def add_from_cart_ajax():
    data = request.get_json()
    name = data.get('name')
    if not name:
        return jsonify({'success': False, 'error': 'No name'}), 400

    product = find_product(name)
    if not product:
        return jsonify({'success': False, 'error': 'Product not found'}), 404

    cart = session.get('cart', [])

    for item in cart:
        if item.get('name') == name:
            item['quantity'] += 1
            item['total_price'] = round(item['quantity'] * float(item['price']), 2)
            break
    else:
        price = float(product['price'])
        cart.append({
            'name': product['name'],
            'price': price,
            'quantity': 1,
            'total_price': round(price, 2),
            'image': product['image']
        })

    session['cart'] = cart
    session.modified = True
    return jsonify({'success': True})


@app.route('/remove_from_cart_ajax', methods=['POST'])
def remove_from_cart_ajax():
    data = request.get_json()
    name = data.get('name')
    if not name:
        return jsonify({'success': False, 'error': 'No name'}), 400

    cart = session.get('cart', [])

    for item in cart:
        if item.get('name') == name:
            item['quantity'] -= 1
            if item['quantity'] <= 0:
                cart.remove(item)
            else:
                item['total_price'] = round(item['quantity'] * float(item['price']), 2)
            break

    session['cart'] = cart
    session.modified = True
    return jsonify({'success': True})


@app.route('/order_form', methods=['GET', 'POST'])
def order_form():
    if request.method == 'POST':
        name = request.form.get('name')
        address = request.form.get('address')
        phone = request.form.get('phone')
        payment_type = request.form.get('payment_type')

        # –¢—É—Ç –º–æ–∂–µ –±—É—Ç–∏ –ª–æ–≥—ñ–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è

        # üßπ –û—á–∏—â–∞—î–º–æ –∫–æ—Ä–∑–∏–Ω—É –ø—ñ—Å–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        session['cart'] = []
        session.modified = True

        # –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –ø–æ–¥—è–∫–∏
        if payment_type == 'cash':
            
            session['cart'] = []
            session.modified = True

            return redirect('/thank_you')
        else:
            return '', 204  # JS —Å–∞–º –∑—Ä–æ–±–∏—Ç—å —Ä–µ–¥–∏—Ä–µ–∫—Ç

    # GET-–∑–∞–ø–∏—Ç ‚Äî –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏
    user_data = None
    username = session.get('username')  # –±–µ—Ä–µ–º–æ –ª–æ–≥—ñ–Ω –∑ —Å–µ—Å—ñ—ó

    if username:
        with open('users.json', 'r', encoding='utf-8') as f:
            users = json.load(f)
            for user in users.values():
                if user.get('name') == username:
                    user_data = user
                    break

    pizza = None
    cart = session.get('cart', [])
    if cart:
        pizza = cart[0]

    return render_template('order_form.html', user=user_data, pizza=pizza)


# --- –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ ---
def load_users():
    if not os.path.exists("users.json"):
        with open("users.json", "w", encoding="utf-8") as f:
            json.dump({}, f, ensure_ascii=False, indent=4)  # <-- –ó–∞–º—ñ–Ω–∞ —Å–ø–∏—Å–∫—É –Ω–∞ —Å–ª–æ–≤–Ω–∏–∫
        return {}
    with open("users.json", "r", encoding="utf-8") as f:
        try:
            data = json.load(f)
            # –Ø–∫—â–æ –¥–∞–Ω—ñ –Ω–µ —Å–ª–æ–≤–Ω–∏–∫, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ —Å–ø–∏—Å–æ–∫, –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –ø—É—Å—Ç–∏–π —Å–ª–æ–≤–Ω–∏–∫
            if not isinstance(data, dict):
                return {}
            return data
        except json.JSONDecodeError:
            with open("users.json", "w", encoding="utf-8") as f2:
                json.dump({}, f2, ensure_ascii=False, indent=4)  # <-- —Ç–µ–∂ —Å–ª–æ–≤–Ω–∏–∫
            return {}


# --- –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ ---
def save_users(users):
    with open(USERS_FILE, 'w') as f:
        json.dump(users, f, indent=2)


@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        name = request.form['name']
        address = request.form['address']
        phone = request.form['phone']

        users = load_users()
        if username in users:
            return '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —É–∂–µ —ñ—Å–Ω—É—î'

        hashed_password = generate_password_hash(password)

        users[username] = {
            'password': hashed_password,
            'name': name,
            'address': address,
            'phone': phone,
            'avatar': None  # –∏–ª–∏ –µ—Å–ª–∏ –¥–æ–±–∞–≤–∏—à—å –∑–∞–≥—Ä—É–∑–∫—É –∞–≤–∞—Ç–∞—Ä–∞ ‚Äî —Ç—É—Ç filename
        }

        save_users(users)
        return redirect(url_for('login'))

    return render_template('register.html')


@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        users = load_users()

        if username in users and check_password_hash(users[username]['password'], password):
            session['username'] = username
            return redirect(url_for('profile'))
        return '–ù–µ–≤—ñ—Ä–Ω–∏–π –ª–æ–≥—ñ–Ω –∞–±–æ –ø–∞—Ä–æ–ª—å'

    return render_template('login.html')


@app.route('/profile', methods=['GET', 'POST'])
def profile():
    if 'username' not in session:
        return redirect(url_for('login'))

    users = load_users()
    username = session['username']
    user = users.get(username)

    if request.method == 'POST':
        avatar_file = request.files.get('avatar')
        if avatar_file and avatar_file.filename:
            avatar_filename = secure_filename(username + '_' + avatar_file.filename)
            avatar_file.save(os.path.join(AVATAR_FOLDER, avatar_filename))
            user['avatar'] = avatar_filename
            save_users(users)

    return render_template('profile.html', user={'username': username, 'avatar': user.get('avatar')})

@app.route('/logout')
def logout():
    session.pop('username', None)
    return redirect(url_for('login'))


@app.route('/thank_you')
def thank_you():
    return render_template('thank_you.html')


if __name__ == "__main__":
    app.run(debug=True)
