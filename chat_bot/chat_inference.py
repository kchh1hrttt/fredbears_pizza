import json
import random
import pickle
import re
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing.sequence import pad_sequences

# === –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ —Ç–∞ –æ–± º—î–∫—Ç—ñ–≤ ===
model = load_model('chat_bot/chatbot_model.h5')

with open('chat_bot/tokenizer.pkl', 'rb') as f:
    tokenizer = pickle.load(f)

with open('chat_bot/label_encoder.pkl', 'rb') as f:
    label_encoder = pickle.load(f)

with open('chat_bot/final_intents.json', 'r', encoding='utf-8') as f:
    intents = json.load(f)

# === –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç—É ===
def clean_text(text):
    text = text.lower()
    text = re.sub(r'[^a-z–∞-—è—ñ—ó—î“ë0-9\\s]', '', text)
    text = re.sub(r'\\s+', ' ', text).strip()
    return text

# === –ì–ª–æ–±–∞–ª—å–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç ===
active_context = None

# === –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å ===
def get_response(user_input, show_top=3):
    global active_context
    cleaned = clean_text(user_input)
    seq = tokenizer.texts_to_sequences([cleaned])
    padded = pad_sequences(seq, maxlen=model.input_shape[1], padding='post')
    prediction = model.predict(padded, verbose=0)[0]

    # –í–∏–±—ñ—Ä —Ç–µ–≥—ñ–≤ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º context_filter
    tag_probs = []
    for idx in range(len(prediction)):
        full_tag = label_encoder.inverse_transform([idx])[0]
        tag = full_tag.split("__")[-1]
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ context_filter
        for intent in intents["intents"]:
            if intent["tag"] == tag:
                context_filter = intent.get("context_filter")
                if not context_filter or context_filter == active_context:
                    tag_probs.append((tag, prediction[idx], intent))
                break

    tag_probs.sort(key=lambda x: x[1], reverse=True)
    tag_probs = tag_probs[:show_top]

    if not tag_probs or tag_probs[0][1] < 0.3:
        return "‚ö†Ô∏è –í–∏–±–∞—á, —è –Ω–µ –∑—Ä–æ–∑—É–º—ñ–≤. –ú–æ–∂–µ—à –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏?"

    top_tag, top_conf, top_intent = tag_probs[0]

    # –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    if "context_set" in top_intent:
        active_context = top_intent["context_set"]

    # –í–∏–≤—ñ–¥ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    print("\\nüß† Top {} –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω—å:".format(show_top))
    for tag, conf, intent in tag_probs:
        print(f" ‚Üí [{tag}] ({conf*100:.1f}%): {random.choice(intent['responses'])}")

    return f"‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å: {random.choice(top_intent['responses'])}"

# === –ì–æ–ª–æ–≤–Ω–∏–π —Ü–∏–∫–ª ===
if __name__ == "__main__":
    print("ü§ñ Fredbear's Pizza –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –∫–æ–Ω—Ç–µ–∫—Å—Ç—É!")
    print("–í–≤–µ–¥–∏ –∑–∞–ø–∏—Ç –∞–±–æ '–≤–∏—Ö—ñ–¥' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è.\\n")
    while True:
        msg = input("üë§ –¢–∏: ")
        if msg.lower() in ["–≤–∏—Ö—ñ–¥", "–≤–∏–π—Ç–∏", "exit", "quit"]:
            print("ü§ñ –ë–æ—Ç: –ë—É–≤–∞–π! üçï")
            break
        response = get_response(msg)
        print("ü§ñ –ë–æ—Ç:", response)
